@Input

V := 해당 차수, 해당 고객에게 가야할 물건들의 Volume list 
C := Bin(basket)의 capacity
Best := 0
Ex) {98, 21, 15, 3 , 1 , 0, 87, 101, 100, 96, 93, 59, 81, 8, 58, 55, 43, 22, 6, 14, 10, 91, 20, 0, 4, 5}, C = 100
--------------------------------------------------------------------------------------------------------------------------

//역순으로 정렬  * 제한된 Capacity를 채우고, 모든 원소들은 정확히 하나의 bin에 들어가야 된다. 따라서 solution search space를 줄이기 위해  남아있는 가장 큰 원소를 항상 선ㄴ택해 채우는 방식을 택한다. 
reverse_order(V)
{101, 100, 98, 96, 93, 91, 87, 81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 10, 8, 6, 5, 4, 3, 1, 0},
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
@Preprocessing

// filter 0 : V에서 C보다 큰 값 혹은 0인 값 제거 
{100, 98, 96, 93, 91, 87, 81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 10, 8, 6, 5, 4, 3, 1},
--------------------------------------------------------------------------------------------------------------------------
// filter 1 : x == C인 경우, 항상  basket에 들어간다.
{98, 96, 93, 91, 87, 81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 10, 8, 6, 5, 4, 3, 1}, USED basket = 1 // {100}
--------------------------------------------------------------------------------------------------------------------------
// filter 2 : x가 하나만 들어가는 것들을 고른다. ( 가장 작은 것과의 합이 C보다 큰 경우) 
--------------------------------------------------------------------------------------------------------------------------
// filter 3 : x + y == C 인 경우 항상 basket에 들어간다. 
{98, 93, 91, 87, 81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 10, 8, 6, 5, 3, 1}, USED basket = 2 // {96, 4}
--------------------------------------------------------------------------------------------------------------------------
// filter 4 : 최대 1개만 더 들어갈 수 있는 x에 대해 ,  즉 가장 작은 2개값(a, b) 와 x의 합이 C를 넘는 경우, 
이러한 x는 넣을 수 있는 최대한의 값과 항상 묶여 basket에 들어간다. 
{93, 91, 87, 81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 10, 8, 6, 5, 3}, USED basket = 3 // {98, 1} 
Since the sum of the two smallest remaining elements, 5 and 3, exceeds the residual capacity of the bin containing 93, 
we can’t place more than one element in that bin, and choose the largest such element 6 to go with 93,

--------------------------------------------------------------------------------------------------------------------------
{91, 87, 81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 10, 8, 5, 3}, basket = 5 // {93, 6}
91과 붙을 수 있는 subset들은, 합이 9보다 작고, 아직 안쓰인 element 들로 이루어진다.  // binary search
 -> {8, 5, 3} 즉 V의 [15, ) 이고, 이 원소들로 만들 수 있는 모든 power set 중 9보다 작거나 같은 subset 들은 {8}, {5}, {3}, {5, 3} 이 된다. 
 -> 그럼  선택할 수 있는 complete bin은 {8}, {5, 3}  이 된다. (*선택할 수 있는 가장 큰 것을 하는게 항상 더 도움이 된다. 8, 5, 3. 이렇게 3개에서
 하나 고른다고 할 때, 8로는 메울 수 없지만 5로 메울 수 있는 공간이 있음을 생각하면 된다.) 그리고 {8}을 선택한다.
 // 합이 같다면 subset의 크기가 더 작은 것을 항상 pick 한다.
--------------------------------------------------------------------------------------------------------------------------
{87, 81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 10, 5, 3}, basket = 6 // {91, 8}
87과 붙을 수 있는 subset들은 합이 13보다 작거나 같은 subset 들, {10}, {5}, {3}, {10 +3}, {5+3} 이 된다. 
그리고 {10+3}이 모든 것을 dominant하기 때문에 , {10 + 3}을 무조건 선택해야 한다. // 즉, feasible set에서 가장 상위에서 dominant 하는 얘들에 대해서만 tree search를 한다.
{81, 59, 58, 55, 50, 43, 22, 21, 20, 15, 14, 5}, basket = 7 // {87 , 10, 3}
 * 여기까진 branching 할 필요가 없다. since there is only one undominated choice for completing each of the bins considered so far.
--------------------------------------------------------------------------------------------------------------------------
81과 붙을 수 있는 element들은 [15, 14, 10, 5] 이고 feasible set들 에서 보면(여기서는 합쳐서 19를 넘지않는 subset들)
{15, 3} {15} {14, 5} {14} {10, 5} {10, 5} {10} {5} 이 되고 , 
가장 상위에서 dominate 하는 것들은 {15, 3}{14, 5} 2가지가 된다. // dominate 하려면 15 < 14, 3 < 5 이거나 15 >14, 3>5 이어야 하는데 다 안됨 
그럼 (14, 5) 를 선택했을 떄와 (15, 3)을 선택했을 때로 branch 해야 한다.
branch할 여러  feasible set이 있다면, 합의 순대로 branch 한다. 

- 14, 5를 선택한 경우 , used basket = 8 // {81 , 14, 5}

{59, 58, 55, 50, 43, 22, 21, 20, 15}

59에 대해 합쳐 41보다 작은 element들은 43 22 21 20 15 가 되고, dominate subset은 
{22, 15} {21, 20} 가 최상위 dominated feable set이다. 그럼 또 다시 2개로 branch하여 search를 해야 한다.

-- 21, 20을 선택한 경우, used basket = 9 // {59 21 20}

{58, 55, 50, 43, 22, 15}, 

58에 대해, 42보다 작은 element들은 22 15 가 되고, 최상위 dominate는 {22, 15} 단 1개이다. 

* 근데 잠시, 현재58 이상인 element와 함께 올 수 있는 element들은 합이 42이하인 element들이다. 이 점에서, 합이 42이하가 되는 {22, 15} 를 고르면
그 다음 스텝에서 가장 작은 것은 43이다.  58보다 큰 값이 들어간 다른 bin들을 생각해보자. 그럼 그안에는 42보다 작은 element들이 들어있겠지.
이 element들을 (22, 15) 말고 rearrange하는 것을 상상해보자. 근데 계속 이전의 bin들을 채울 때는 다른것이 더 못들어가게 꽉꽉 채웠잖아. 
rearrange한다면 이 꽉꽉채운 것이 나빠지면 나빠지지, 좋아지지 않아. 그렇기 때문에, 이전의 결과들에 대해 rearrange를 할 필요성이 없어지는 거지. 따라서 
2단계위에서 branch된 쪽이나 1단계 위에서 branch 된 것들은 seach할 필요가 없는 것임. 그러므로, 여기부터는 다시 1개에서 왔던 거 처럼 쭉 search를 
진행하면 된다. 

이걸 좀더 general하게 써보면 다음과 같다. 
현재 {58, 55, 50, 43, 22, 15}에서 bin 메꿀 거고, 여기에 dominated하는 subset으로 {22, 15}를 찾은 시점이야. 
그럼 이전의 모든 branch들을 안할 수 있는지 조사를 한다. 
- 58 > 50이고, 내가 subset으로 찾은 것들을 쓴다면, 다음에 작은 값 43은 42보다 크니, 지금까지의 선택에 재조정할 필요가 없다.
-> 따라서 이전의 branch를 무시한다.

If x > c/2이고 c-x보다 작은 모든 element들에 대해, 내가 현재 고른 element들을 뺀다면 c-x보다 작은 element가 하나도 없어. (이미 다 사용되었어)
그러면 더 상위단에서 수행해야할 branch들은 모두 무시하고(안돌아가고) 쭉 진행을 하면 된다. 

--------------------------------------------------------------------------------------------------------------------------
새로운 시작은 {55, 50, 43}, used basket = 10 // {58, 22, 15}이 된다. 
55보다 작은 거는 {43}밖에 없다.
{50}, basket = 9// {55, 43}
--------------------------------------------------------------------------------------------------------------------------
{50}현재 선택할 수 있는게 하나밖에 없다 -> used basket = 11  // {50}
--------------------------------------------------------------------------------------------------------------------------
NULL이다 -> 종료, 최종 basket = 11 

 
